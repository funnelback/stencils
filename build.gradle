/**
 * Using the VERSION/funnelback-release file, determine the Funnelback
 * minor release version. e.g '15.21.1920' returns '21'
 *
 * @return A Groovy Funnelback minor version number
 */
def findFunnelbackMinorVersion() {
    File flbReleaseFile = file(java.nio.file.Paths.get(System.getenv("SEARCH_HOME"), "VERSION/funnelback-release"))
    def flbRelease = flbReleaseFile
        .getText("UTF-8")
        .replaceFirst(/Funnelback 15\./, "")
        .replaceFirst(/\..+/, "")

    return flbRelease.toInteger()
}

/**
 * Attempt to find the Groovy version to use depending on the Groovy JAR present
 * in $SEARCH_HOME/lib/java/all/groovy-all-X.Y.Z.jar and the Funnelback release
 *
 * @return A Groovy version number
 * @throws IllegalStateException if the Groovy JAR cannot be located
 */
def findGroovyVersion () {
    def groovyJar
    
    if (findFunnelbackMinorVersion() > 16) {
        groovyJar = file(java.nio.file.Paths.get(System.getenv("SEARCH_HOME"), "lib/java/all/")).listFiles()
            .find() { file -> file.name.matches(/groovy-\d\.\d\.\d\.jar/) }

        if (!groovyJar) {
            throw new IllegalStateException("Unable to locate groovy-X.Y.Z.jar file in in \$SEARCH_HOME/lib/java/all/")
        }

        return groovyJar.name
                .replace("groovy-", "")
                .replace(".jar", "")
    }
    else {
        groovyJar = file(java.nio.file.Paths.get(System.getenv("SEARCH_HOME"), "lib/java/all/")).listFiles()
            .find() { file -> file.name.matches(/groovy-all-\d\.\d\.\d\.jar/) }

        if (!groovyJar) {
            throw new IllegalStateException("Unable to locate groovy-X.Y.Z.jar file in in \$SEARCH_HOME/lib/java/all/")
        }

        return groovyJar.name
                .replace("groovy-all-", "")
                .replace(".jar", "")
    }
}

plugins {
    id 'groovy'
    id 'distribution'
}

repositories {
    mavenCentral()
}

project.ext {
    groovyVersion = findGroovyVersion()
}

project.with {
    group = 'com.funnelback.stencils'
    version = 'master-SNAPSHOT'

    defaultTasks 'build'
}

dependencies {
    testCompile (
        'junit:junit:4.+',
        'org.mockito:mockito-core:1.+'
    )

    compile (
        "org.codehaus.groovy:groovy-all:${groovyVersion}",
        fileTree(dir: "${System.getenv("SEARCH_HOME")}/lib/java/all/", include: '*.jar')
        
        // Add script specific dependencies here that are used with @Grapes/@Grab

    )
}

compileGroovy {
    groovyOptions.configurationScript = file("gradle/config.groovy")
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

distributions {
    stencils {
        baseName 'stencils'
        contents {
            includeEmptyDirs = false
            exclude(
                // Build output
                'build',
                'out',
                // Stencils v1 stuff we don't want to distribute
                'libraries/@docs',
                'libraries/@default',
                'libraries/**/controllers',
                'libraries/**/views',
                'resources/noresult',
                'resources/facebook',
                'resources/places',
                'resources/compare',
                'resources/recommender',
                'resources/tabs',
                'resources/courses',
                'resources/core',
                'resources/jira',
                'resources/people',
                'resources/social',
                'resources/twitter',
                'resources/flickr',
                'resources/people',
                'resources/youtube',
                // Old Metadata scraper that's now part of the product
                'src/main/groovy/com/funnelback/stencils/filter/scraper',
                // IDE project files
                '.idea',
            )
            from { '.' }
        }
    }
}
